#include <Prizm.h>

Prizm prizm;

const int leftMotorPin = 1; // Left motor pin
const int rightMotorPin = 0; // Right motor pin
const int ultrasonicPin = 2; // Ultrasonic sensor pin
const int lineSensorPin = A0; // Light sensor pin

const float turnRadius = 150; // Turn radius in cm
const float turnCircumference = 2 * PI * turnRadius; // Circumference of the turn
const float pointTurnAngle = 90; // Angle for point turn in degrees
const float backwardDistance = 50; // Distance to travel backwards in cm
const float forwardSpeed = 0.5; // Linear velocity for forward motion in m/s

void setup() {
  prizm.begin();
  pinMode(lineSensorPin, INPUT);
  pinMode(ultrasonicPin, INPUT);
}

void loop() {
  // Step 1: Travel with a turn radius of 1.5m
  prizm.turnWithRadius(leftMotorPin, rightMotorPin, turnRadius);
  
  // Calculate time required to cover one circumference
  float travelTime = turnCircumference / (forwardSpeed * 100); // Convert speed to m/s

  // Wait for one circumference to be covered
  delay(travelTime * 1000); // Convert time to milliseconds
  
  // Stop for 3 secs
  prizm.stopMovement();
  delay(3000);

  // Step 2: Take a point turn for 90 degrees
  prizm.pointTurn(pointTurnAngle);

  // Stop for 1 sec
  delay(1000);

  // Step 3: Travel 50 cm backwards with a linear velocity of 0.5m/s until it detects a black line
  prizm.moveBackward(backwardDistance, forwardSpeed);

  // Wait until black line is detected
  while (prizm.readLineSensor(lineSensorPin) > 1000) {
    delay(100); // Check every 100ms
  }

  // Stop for 1 sec
  prizm.stopMovement();
  delay(1000);

  // Repeat all above behavior in reverse direction
  // Step 4: Reverse direction
  prizm.reverseDirection(leftMotorPin, rightMotorPin);

  // Repeat steps 1-3

  // Revert to forward direction for next iteration
  prizm.forwardDirection(leftMotorPin, rightMotorPin);
}
